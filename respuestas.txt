18. Muestra literalmente lo que escribiste. En este caso, Hola Mundo.

21. Poniendo "\t\n" hace un tabulador y un retorno de carro. Si lo pones entre comillas simples
('\t\n') muestra literalmente lo que has escrito, que es \t\n.

22. %q es similar a usar comillas simples. No evalua la expresión escrita.

23. %Q es similar a usar comillas dobles.  Evalua la expresión escrita.

24. En c queda:  --4--
                 --2--
    Evalua la expresión.           

25. En c queda:  --#{a}--
                 --#{b}--
    No evalua la expresión.

26.
    s[0,2]  -> he
    s[-1,1] -> o
    s[0,10] -> hello
    
27. hello world

28. ...

29. 2 2 2

30. Es un array en el que están los elementos this, is, a y test con comillas simples.

31. Es un array en el que los elementos almacenados son '\t' y '\n'.

32. Es un array en el que los elementos almacenados son "\t" y "\n".

33. Contiene un array vacío de 3 elementos.

34. Contiene un array de 3 elementos inicializados a 0.

35. Queda un array con los elementos 1, 2, 3 y 4.

36. Quedan los elementos 0, 2 y 4. Los 3 primeros múltiplos de 2.

37. 
>> a = ('a'..'e').to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=> ["b"]
>> a[-2,2]
=> ["d", "e"]
>> a[0..2]
=> ["a", "b", "c"]
>> a[0...1]
=> ["a"]
>> a[-2..-1]
=> ["d", "e"]

38. 
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=> ["A", "B", "c", "d", "e"]
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]
>> a[0,2] = []
=> []
>> a
=> [3, "A", "B", "C", "D", "E"]
>> a[-1,1] = [ 'Z' ]
=> ["Z"]
>> a
=> [3, "A", "B", "C", "D", "Z"]
>> a[-2,2] = nil
=> nil
>> a
=> [3, "A", "B", "C", nil]

39.
>> a = (1...4).to_a
=> [1, 2, 3]
>> a = a + [4, 5]
=> [1, 2, 3, 4, 5]
>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]
>> a = a + 9

40.
>> x = %w{a b c b a}
=> ["a,", "b,", "c,", "b,", "a"]
>> x = x - %w{b c d}
=> ["a,", "b,", "c,", "b,", "a"]

41.
>> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]

42.
>> a = []
=> []
>> a << 1
=> [1]
>> a << 2 << 3
=> [1, 2, 3]
>> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]
>> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43.
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=> [1, 2, 3, 4, 5]
>> d = b | a
=> [5, 4, 3, 2, 1]
>> e = a & b
=> [2, 3, 4]
>> f = b & a
=> [4, 3, 2]

44.
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>> b = 1...10
=> 1....10
>> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
>> b.include? 10
=> false
>> b.include? 8
=> true
>> b.step(2) {|x| print "#{x} " }
>> 1..3.to_a

45. 
>> r = 0...100
=> 0....100
>> r.member? 50
=> true
>> r.include? 99.9
=> true
>> r.member? 99.9
=> true

46. 
>> true.class
=> TrueClass
>> false.class
=> FalseClass
>> puts "hello" if 0
=> nil
>> puts "hello" if nil
=> nil
>> puts "hello" if ""
=> nil

47.
>> x = :sym
=> :sym
>> x.class
=> Symbol
>> x == ’sym’
=> false
>> x == :sym
=> true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=> Symbol
>> x == ’sym’.to_sym
=> true
>> x.to_s == ’sym’
=> true

48.
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub=> nil
>> t = "Java"
=> "Java"
>> print s, t
RubJava=> nil

49.
>> "%d %s" % [3, "rubies"]
=> "3 rubies"

50.
>> x, y = 4, 5
=> [4, 5]
>> z = x > y ? x : y
=> 5
>> x,y,z = [1,2,3]
=> [1, 2, 3]

51.
>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=> [:a, :b]
>> x.values
=> [1, 2]
>> x[:c] = 3
=> 3
>> x
=> {:a=>1, :b=>2, :c=>3}
>> x.delete(’a’)
=> nil
>> x
=> {:a=>1, :b=>2, :c=>3}
>> x.delete(:a)
=> 1
>> x
=> {:b=>2, :c=>3}
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1}
>> x
=> {:a=>1}