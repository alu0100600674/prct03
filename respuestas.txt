18. Escriba el programa que muestra por la consola la frase "Hola Mundo". ¿Qué significado tiene la salida? (puts ’Hola Mundo’)
Muestra literalmente lo que escribiste. En este caso, Hola Mundo.


21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?
Poniendo "\t\n" hace un tabulador y un retorno de carro. Si lo pones entre comillas simples
('\t\n') muestra literalmente lo que has escrito, que es \t\n.


22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?
%q es similar a usar comillas simples. No evalua la expresión escrita.


23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?
%Q es similar a usar comillas dobles.  Evalua la expresión escrita.


24. ¿Qué queda en c?
En c queda:  --4--
             --2--
    Evalua la expresión.           


25. ¿Qué queda en c?
    En c queda:  --#{a}--
                 --#{b}--
    No evalua la expresión.


26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?
    s[0,2]  -> he
    s[-1,1] -> o
    s[0,10] -> hello

    
27. ¿Qué queda en g?
hello world


28. ¿Qué queda en e?
...


29. ¿Cuál es el resultado?
2 2 2


30. ¿Qué es esto? %w[this is a test]
Es un array en el que están los elementos this, is, a y test con comillas simples.


31. ¿Qué es esto? %w[\t \n]
Es un array en el que los elementos almacenados son '\t' y '\n'.


32. ¿Qué es esto? %W[\t \n]
Es un array en el que los elementos almacenados son "\t" y "\n".


33. ¿Qué contiene nils? nils = Array.new(3)
Contiene un array vacío de 3 elementos.


34. ¿Qué contiene zeros? zeros = Array.new(3, 0)
Contiene un array de 3 elementos inicializados a 0.


35. ¿Qué queda en b?
Queda un array con los elementos 1, 2, 3 y 4.


36. ¿Qué queda en c?
Quedan los elementos 0, 2 y 4. Los 3 primeros múltiplos de 2.


37. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = ('a'..'e').to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=> ["b"]
>> a[-2,2]
=> ["d", "e"]
>> a[0..2]
=> ["a", "b", "c"]
>> a[0...1]
=> ["a"]
>> a[-2..-1]
=> ["d", "e"]


38. ¿Cuál es el resultado de cada una de estas operaciones?
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=> ["A", "B", "c", "d", "e"]
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]
>> a[0,2] = []
=> []
>> a
=> [3, "A", "B", "C", "D", "E"]
>> a[-1,1] = [ 'Z' ]
=> ["Z"]
>> a
=> [3, "A", "B", "C", "D", "Z"]
>> a[-2,2] = nil
=> nil
>> a
=> [3, "A", "B", "C", nil]


39. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = (1...4).to_a
=> [1, 2, 3]
>> a = a + [4, 5]
=> [1, 2, 3, 4, 5]
>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]
>> a = a + 9


40. ¿Cuál es el resultado de cada una de estas operaciones?
>> x = %w{a b c b a}
=> ["a,", "b,", "c,", "b,", "a"]
>> x = x - %w{b c d}
=> ["a,", "b,", "c,", "b,", "a"]


41. ¿Cuál es el resultado de cada una de estas operaciones?
>> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]


42. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = []
=> []
>> a << 1
=> [1]
>> a << 2 << 3
=> [1, 2, 3]
>> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]
>> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]


43. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=> [1, 2, 3, 4, 5]
>> d = b | a
=> [5, 4, 3, 2, 1]
>> e = a & b
=> [2, 3, 4]
>> f = b & a
=> [4, 3, 2]


44. ¿Qué resultados dan las siguientes operaciones?
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>> b = 1...10
=> 1....10
>> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
>> b.include? 10
=> false
>> b.include? 8
=> true
>> b.step(2) {|x| print "#{x} " }
>> 1..3.to_a


45. ¿Qué resultados dan las siguientes operaciones?
>> r = 0...100
=> 0....100
>> r.member? 50
=> true
>> r.include? 99.9
=> true
>> r.member? 99.9
=> true


46. ¿Qué resultados dan las siguientes operaciones?
>> true.class
=> TrueClass
>> false.class
=> FalseClass
>> puts "hello" if 0
=> nil
>> puts "hello" if nil
=> nil
>> puts "hello" if ""
=> nil


47. ¿Qué resultados dan las siguientes operaciones?
>> x = :sym
=> :sym
>> x.class
=> Symbol
>> x == ’sym’
=> false
>> x == :sym
=> true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=> Symbol
>> x == ’sym’.to_sym
=> true
>> x.to_s == ’sym’
=> true


48. ¿Qué resultados se dan?
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub=> nil
>> t = "Java"
=> "Java"
>> print s, t
RubJava=> nil


49. ¿Cuál es el resultado?
>> "%d %s" % [3, "rubies"]
=> "3 rubies"


50. ¿Cuáles son los resultados?
>> x, y = 4, 5
=> [4, 5]
>> z = x > y ? x : y
=> 5
>> x,y,z = [1,2,3]
=> [1, 2, 3]


51. ¿Qué resultados dan las siguientes operaciones?
>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=> [:a, :b]
>> x.values
=> [1, 2]
>> x[:c] = 3
=> 3
>> x
=> {:a=>1, :b=>2, :c=>3}
>> x.delete(’a’)
=> nil
>> x
=> {:a=>1, :b=>2, :c=>3}
>> x.delete(:a)
=> 1
>> x
=> {:b=>2, :c=>3}
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1}
>> x
=> {:a=>1}


52. ¿Qué hace yield 4, 5?
Lo que hace es darle el control al bloque pasandole como argumentos 4 y 5. Cuando termina devuelve el control.


53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignación counts = {}?
counts = Hash.new(0) crea un hash sin elementos. En cambio counts = {} crea un array vacío.


54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/
Devuelve: ["hello", "world", "hello", "LPP"]


55. Explique que hacen estas sentencias:
c = { :a => 3, :b => 2, :c => 1 }
Esta primera sentencia crea tres symbols, a con el valor 3, b con valor 2, y c con valor 1.
c.keys.sort.each { |k| puts c[k] }
Esta segunda sentencia recorre el array llamado c.
